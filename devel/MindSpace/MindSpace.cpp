#include "MindSpace.h"

#include <QUuid>
#include <QStringList>

namespace MindSpace
{
 
/* Our predefined types */
#define DefineNodeType(name, uuid) \
	static MNodeType MNodeType_##name ( #name, uuid); \
	const MNodeType & MNodeType:: name() { return MNodeType_##name; }

#define DefineLinkType(name, uuid) \
	static MLinkType MLinkType_##name ( #name, uuid); \
	const MLinkType & MLinkType:: name() { return MLinkType_##name; }

#define DefineLinkTypeList(name, uuid) \
	static MLinkType MLinkType_##name ( #name, uuid, true); \
	const MLinkType & MLinkType:: name() { return MLinkType_##name; }

// Generated by mindspace-types.pl from MindSpace.types
#include "mindspace-types.definitions"

MSpace *MSpace::s_activeSpace = 0;

MSpace::MSpace()
{
	s_activeSpace = this;
}

/** Destroy the MSpace **/
MSpace::~MSpace() 
{
	qDeleteAll(m_nodes);
	qDeleteAll(m_links);
	
	m_nodes.clear();
	m_links.clear();
	
	if(s_activeSpace == this)
		s_activeSpace = 0;
}

void MSpace::makeActive()
{
	s_activeSpace = this;
}

void MSpace::addNode(MNode *node)
{
	if(m_nodes.contains(node))
		return;
	
	m_nodes << node;
	m_uuidToNode[node->uuid()] = node;
	
	emit nodeAdded(node);
}

void MSpace::removeNode(MNode *node)
{
	if(!m_nodes.contains(node))
		return;
	
	m_nodes.removeAll(node);
	m_uuidToNode.remove(node->uuid());
	
	emit nodeRemoved(node);
}

void MSpace::addLink(MLink *link)
{
	if(m_links.contains(link))
		return;
	
	m_links << link;
	m_uuidToLink[link->uuid()] = link;
	
	emit linkAdded(link);
}

void MSpace::removeLink(MLink *link)
{
	if(!m_links.contains(link))
		return;
	
	m_links.removeAll(link);
	m_uuidToLink.remove(link->uuid());
	
	emit linkRemoved(link);
}


bool MSpace::fromVariantMap(const QVariantMap& map, bool onlyApplyIfChanged)
{
	bool flag = QStorableObject::fromVariantMap(map, onlyApplyIfChanged);
	
	QVariantList nodes = map["nodes"].toList();
	QVariantList links = map["links"].toList();
	
	foreach(QVariant data, nodes)
	{
		QVariantMap map = data.toMap();
		MNode *node = new MNode();
		node->fromVariantMap(map);
		//qDebug() << "MSpace::fromVariantMap: Loaded node:" <<node;
		addNode(node);
	}

	foreach(QVariant data, links)
	{
		QVariantMap map = data.toMap();
		MLink *link= new MLink();
		link->fromVariantMap(map);
		//qDebug() << "MSpace::fromVariantMap: Loaded link:" <<link;
		addLink(link);
	}
	
	return flag;
}

QVariantMap MSpace::toVariantMap()
{
	QVariantMap map = QStorableObject::toVariantMap();
		
	QVariantList nodes;
	foreach(MNode *node, m_nodes)
		nodes << node->toVariantMap();
	map["nodes"] = nodes;
	
	QVariantList links;
	foreach(MLink *link, m_links)
		links << link->toVariantMap();
	map["links"] = links;
	
	return map;
}

		
}; /* namespace MindSpace */

